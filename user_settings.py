from PyQt6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, 
                            QTabWidget, QWidget, QComboBox, QFrame, QScrollArea,
                            QLineEdit, QMessageBox, QGridLayout)
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QFont, QPixmap
import os

class UserSettings:
    def __init__(self, Azer_AI):
        self.Azer_AI = Azer_AI
        self.settings_window = None
        self.colors = Azer_AI.colors

    def show_settings(self):
        # ∆èg…ôr p…ônc…ôr…ô artƒ±q a√ßƒ±qdƒ±rsa, yalnƒ±z √∂n…ô g…ôtir
        if self.settings_window is not None and self.settings_window.isVisible():
            self.settings_window.activateWindow()
            self.settings_window.raise_()
            return
        
        # ∆èg…ôr p…ônc…ôr…ô baƒülƒ±dƒ±rsa v…ô ya he√ß yaradƒ±lmayƒ±bsa, yeni bir d…ôn…ô yarat
        self.settings_window = QDialog(self.Azer_AI)
        self.settings_window.setWindowTitle("ƒ∞stifad…ô√ßi Parametrl…ôri")
        self.settings_window.setMinimumSize(600, 700)
        self.settings_window.setStyleSheet(f"background-color: {self.colors['bg']};")
        
        # ∆èsas layout
        main_layout = QVBoxLayout(self.settings_window)
        
        # Tabview yarat
        tabview = QTabWidget()
        tabview.setStyleSheet(f"""
            QTabWidget::pane {{
                border: 1px solid {self.colors['primary']};
                background-color: {self.colors['bg_secondary']};
            }}
            QTabBar::tab {{
                background-color: {self.colors['bg_secondary']};
                color: {self.colors['text']};
                padding: 8px 12px;
                margin-right: 2px;
            }}
            QTabBar::tab:selected {{
                background-color: {self.colors['primary']};
                color: white;
            }}
        """)
        
        # Sekm…ôl…ôri …ôlav…ô et
        tab_voice = QWidget()
        tab_assistant = QWidget()
        tab_appearance = QWidget()
        tab_commands = QWidget()
        tab_plugins = QWidget()
        
        tabview.addTab(tab_voice, "üîä S…ôs Parametrl…ôri")
        tabview.addTab(tab_assistant, "ü§ñ Asistan Parametrl…ôri")
        tabview.addTab(tab_appearance, "üé® G√∂r√ºn√º≈ü")
        tabview.addTab(tab_commands, "‚ö° ∆èmrl…ôr")
        tabview.addTab(tab_plugins, "üîå Plugin-l…ôr")
        
        # Sekm…ôl…ôri yarat
        self.create_voice_settings(tab_voice)
        self.create_assistant_settings(tab_assistant)
        self.create_appearance_settings(tab_appearance)
        self.create_command_settings(tab_commands)
        self.create_plugin_settings(tab_plugins)
        
        # Ana t…ôtbiqd…ô …ômrl…ôri yenil…ô (p…ônc…ôr…ô a√ßƒ±ldƒ±ƒüƒ±nda)
        self.Azer_AI.refresh_custom_commands()
        
        main_layout.addWidget(tabview)
        
        # Alt d√ºym…ôl…ôr √º√ß√ºn frame
        button_frame = QFrame()
        button_frame.setStyleSheet("background-color: transparent;")
        button_layout = QHBoxLayout(button_frame)
        
        # Saxla D√ºym…ôsi
        save_btn = QPushButton("üíæ B√ºt√ºn Parametrl…ôri Saxla")
        save_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {self.colors['primary']};
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px;
                font-size: 12pt;
            }}
            QPushButton:hover {{
                background-color: {self.colors['secondary']};
            }}
        """)
        save_btn.clicked.connect(self.save_all_settings)
        button_layout.addWidget(save_btn)
        
        # L…ôƒüv Et D√ºym…ôsi
        cancel_btn = QPushButton("‚ùå L…ôƒüv et")
        cancel_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {self.colors['bg_tertiary']};
                color: {self.colors['text']};
                border: 1px solid {self.colors['border']};
                border-radius: 5px;
                padding: 10px;
                font-size: 12pt;
            }}
            QPushButton:hover {{
                background-color: {self.colors['bg_secondary']};
                border-color: {self.colors['primary']};
            }}
        """)
        cancel_btn.clicked.connect(self.close_settings)
        button_layout.addWidget(cancel_btn)
        
        main_layout.addWidget(button_frame)
        
        # P…ônc…ôr…ô baƒülandƒ±ƒüƒ±nda self.settings_window-u None et
        self.settings_window.finished.connect(self.on_settings_closed)
        
        # Ana t…ôtbiqd…ô …ômrl…ôri yenil…ô (p…ônc…ôr…ô a√ßƒ±ldƒ±ƒüƒ±nda)
        self.Azer_AI.refresh_custom_commands()
        
        # P…ônc…ôr…ôni g√∂st…ôr
        self.settings_window.exec()

    def on_settings_closed(self):
        """Parametrl…ôr p…ônc…ôr…ôsi baƒülandƒ±ƒüƒ±nda √ßaƒüƒ±rƒ±lƒ±r"""
        # Ana t…ôtbiqd…ô …ômrl…ôri yenil…ô (p…ônc…ôr…ô baƒülandƒ±ƒüƒ±nda)
        self.Azer_AI.refresh_custom_commands()
        self.settings_window = None

    def create_voice_settings(self, parent):
        layout = QVBoxLayout(parent)
        
        # TTS Motoru se√ßimi
        engine_frame = QFrame()
        engine_frame.setStyleSheet(f"""
            QFrame {{
                background-color: {self.colors['bg_secondary']};
                border-radius: 5px;
                padding: 10px;
            }}
        """)
        engine_layout = QVBoxLayout(engine_frame)
        
        engine_label = QLabel("TTS Motoru:")
        engine_label.setStyleSheet(f"color: {self.colors['text']};")
        engine_layout.addWidget(engine_label)
        
        self.tts_engine_combo = QComboBox()
        self.tts_engine_combo.addItems(["Edge TTS", "gTTS"])
        self.tts_engine_combo.setCurrentIndex(0 if self.Azer_AI.voice_settings['tts_engine'] == 'edge' else 1)
        self.tts_engine_combo.setStyleSheet(f"""
            QComboBox {{
                background-color: {self.colors['bg_tertiary']};
                color: {self.colors['text']};
                border: 1px solid {self.colors['border']};
                border-radius: 5px;
                padding: 5px;
            }}
            QComboBox:hover {{
                border: 1px solid {self.colors['primary']};
                background-color: {self.colors['bg_secondary']};
            }}
            QComboBox:focus {{
                border: 2px solid {self.colors['accent']};
                background-color: {self.colors['bg_secondary']};
            }}
            QComboBox::drop-down {{
                border: none;
            }}
            QComboBox QAbstractItemView {{
                background-color: {self.colors['bg_secondary']};
                color: {self.colors['text']};
                selection-background-color: {self.colors['primary']};
                border: 1px solid {self.colors['border']};
            }}
        """)
        engine_layout.addWidget(self.tts_engine_combo)
        
        layout.addWidget(engine_frame)
        
        # Dil se√ßimi
        language_frame = QFrame()
        language_frame.setStyleSheet(f"""
            QFrame {{
                background-color: {self.colors['bg_secondary']};
                border-radius: 5px;
                padding: 10px;
            }}
        """)
        language_layout = QVBoxLayout(language_frame)
        
        language_label = QLabel("Dil:")
        language_label.setStyleSheet(f"color: {self.colors['text']};")
        language_layout.addWidget(language_label)
        
        self.language_combo = QComboBox()
        self.language_combo.addItems(["Az…ôrbaycan dili (az-AZ)", "T√ºrk dili (tr-TR)"])
        self.language_combo.setCurrentIndex(0 if self.Azer_AI.voice_settings['language'] == 'az-AZ' else 1)
        self.language_combo.setStyleSheet(f"""
            QComboBox {{
                background-color: {self.colors['bg_tertiary']};
                color: {self.colors['text']};
                border: 1px solid {self.colors['border']};
                border-radius: 5px;
                padding: 5px;
            }}
            QComboBox:hover {{
                border: 1px solid {self.colors['primary']};
                background-color: {self.colors['bg_secondary']};
            }}
            QComboBox:focus {{
                border: 2px solid {self.colors['accent']};
                background-color: {self.colors['bg_secondary']};
            }}
            QComboBox::drop-down {{
                border: none;
            }}
            QComboBox QAbstractItemView {{
                background-color: {self.colors['bg_secondary']};
                color: {self.colors['text']};
                selection-background-color: {self.colors['primary']};
                border: 1px solid {self.colors['border']};
            }}
        """)
        language_layout.addWidget(self.language_combo)
        
        layout.addWidget(language_frame)
        
        # Ses cinsiyet se√ßimi
        gender_frame = QFrame()
        gender_frame.setStyleSheet(f"""
            QFrame {{
                background-color: {self.colors['bg_secondary']};
                border-radius: 5px;
                padding: 10px;
            }}
        """)
        gender_layout = QVBoxLayout(gender_frame)
        
        gender_label = QLabel("S…ôs Cinsi:")
        gender_label.setStyleSheet(f"color: {self.colors['text']};")
        gender_layout.addWidget(gender_label)
        
        self.gender_combo = QComboBox()
        self.gender_combo.addItems(["Ki≈üi s…ôsi", "Qadƒ±n s…ôsi"])
        self.gender_combo.setCurrentIndex(0 if self.Azer_AI.voice_settings['voice_gender'] == 'male' else 1)
        self.gender_combo.setStyleSheet(f"""
            QComboBox {{
                background-color: {self.colors['bg_tertiary']};
                color: {self.colors['text']};
                border: 1px solid {self.colors['border']};
                border-radius: 5px;
                padding: 5px;
            }}
            QComboBox:hover {{
                border: 1px solid {self.colors['primary']};
                background-color: {self.colors['bg_secondary']};
            }}
            QComboBox:focus {{
                border: 2px solid {self.colors['accent']};
                background-color: {self.colors['bg_secondary']};
            }}
            QComboBox::drop-down {{
                border: none;
            }}
            QComboBox QAbstractItemView {{
                background-color: {self.colors['bg_secondary']};
                color: {self.colors['text']};
                selection-background-color: {self.colors['primary']};
                border: 1px solid {self.colors['border']};
            }}
        """)
        gender_layout.addWidget(self.gender_combo)
        
        layout.addWidget(gender_frame)
        
        # Test d√ºym…ôsi
        test_btn = QPushButton("üîä S…ôsi Test Et")
        test_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {self.colors['primary']};
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px;
            }}
            QPushButton:hover {{
                background-color: {self.colors['secondary']};
            }}
        """)
        test_btn.clicked.connect(self.test_voice)
        layout.addWidget(test_btn)
        
        # Bo≈üluq …ôlav…ô et
        layout.addStretch()

    def create_assistant_settings(self, parent):
        layout = QVBoxLayout(parent)
        
        # Wake Word parametrl…ôri
        wake_word_frame = QFrame()
        wake_word_frame.setStyleSheet(f"""
            QFrame {{
                background-color: {self.colors['bg_secondary']};
                border-radius: 5px;
                padding: 10px;
            }}
        """)
        wake_word_layout = QVBoxLayout(wake_word_frame)
        
        # Ba≈ülƒ±q
        title_label = QLabel("Wake Word Parametrl…ôri")
        title_label.setStyleSheet(f"color: {self.colors['text']}; font-weight: bold;")
        wake_word_layout.addWidget(title_label)
        
        # A√ßƒ±qlama
        desc_label = QLabel("Asistanƒ± aktivl…ô≈üdirm…ôk √º√ß√ºn istifad…ô ed…ôc…ôyiniz 'wake word'l…ôri f…ôrdil…ô≈üdir…ô bil…ôrsiniz. H…ôr dil √º√ß√ºn f…ôrqli s√∂zl…ôr t…ôyin ed…ô bil…ôrsiniz. Verg√ºll…ô ayƒ±raraq √ßoxlu s√∂z …ôlav…ô ed…ô bil…ôrsiniz.")
        desc_label.setStyleSheet(f"color: {self.colors['text_secondary']};")
        desc_label.setWordWrap(True)
        wake_word_layout.addWidget(desc_label)
        
        # ∆èsas Wake Word parametrl…ôri
        base_words_frame = QFrame()
        base_words_frame.setStyleSheet(f"""
            QFrame {{
                background-color: {self.colors['bg']};
                border-radius: 5px;
                padding: 10px;
                margin-top: 5px;
                margin-bottom: 10px;
            }}
        """)
        base_words_layout = QGridLayout(base_words_frame)
        
        # ∆èsas Wake Words ba≈ülƒ±q
        base_title = QLabel("∆èsas Wake Word'l…ôr")
        base_title.setStyleSheet(f"color: {self.colors['primary']}; font-weight: bold;")
        base_words_layout.addWidget(base_title, 0, 0, 1, 2)
        
        # Az…ôrbaycan dili …ôsas wake word
        az_base_label = QLabel("Az…ôrbaycan dili:")
        az_base_label.setStyleSheet(f"color: {self.colors['text']};")
        base_words_layout.addWidget(az_base_label, 1, 0)
        
        self.az_base_word = QLineEdit()
        self.az_base_word.setPlaceholderText("M…ôs…ôl: az…ôr, samir, asistan (verg√ºll…ô ayƒ±rƒ±n)")
        self.az_base_word.setStyleSheet(f"""
            QLineEdit {{
                background-color: {self.colors['bg_tertiary']};
                color: {self.colors['text']};
                border: 1px solid {self.colors['border']};
                border-radius: 5px;
                padding: 5px;
            }}
            QLineEdit:hover {{
                border: 1px solid {self.colors['primary']};
                background-color: {self.colors['bg_secondary']};
            }}
            QLineEdit:focus {{
                border: 2px solid {self.colors['accent']};
                background-color: {self.colors['bg_secondary']};
            }}
        """)
        
        # M√∂vcud az_word d…ôy…ôrini y√ºkl…ô
        if 'wake_word_settings' in self.Azer_AI.current_user and 'az_word' in self.Azer_AI.current_user['wake_word_settings']:
            self.az_base_word.setText(self.Azer_AI.current_user['wake_word_settings']['az_word'])
        else:
            # Standart d…ôy…ôr
            self.az_base_word.setText('az…ôr')
        
        base_words_layout.addWidget(self.az_base_word, 1, 1)
        
        # T√ºrk dili …ôsas wake word
        tr_base_label = QLabel("T√ºrk dili:")
        tr_base_label.setStyleSheet(f"color: {self.colors['text']};")
        base_words_layout.addWidget(tr_base_label, 2, 0)
        
        self.tr_base_word = QLineEdit()
        self.tr_base_word.setPlaceholderText("N√ºmun…ô: azer, samir, asistan (verg√ºll…ô ayƒ±rƒ±n)")
        self.tr_base_word.setStyleSheet(f"""
            QLineEdit {{
                background-color: {self.colors['bg_tertiary']};
                color: {self.colors['text']};
                border: 1px solid {self.colors['border']};
                border-radius: 5px;
                padding: 5px;
            }}
            QLineEdit:hover {{
                border: 1px solid {self.colors['primary']};
                background-color: {self.colors['bg_secondary']};
            }}
            QLineEdit:focus {{
                border: 2px solid {self.colors['accent']};
                background-color: {self.colors['bg_secondary']};
            }}
        """)
        
        # M√∂vcud tr_word d…ôy…ôrini y√ºkl…ô
        if 'wake_word_settings' in self.Azer_AI.current_user and 'tr_word' in self.Azer_AI.current_user['wake_word_settings']:
            self.tr_base_word.setText(self.Azer_AI.current_user['wake_word_settings']['tr_word'])
        else:
            # Standart d…ôy…ôr
            self.tr_base_word.setText('azer')
        
        base_words_layout.addWidget(self.tr_base_word, 2, 1)
        
        # A√ßƒ±qlama m…ôtni
        base_info = QLabel("Bu s√∂zl…ôr, verg√ºll…ô ayrƒ±lmƒ±≈ü ≈ü…ôkild…ô, asistanƒ±nƒ±zƒ± t…ôyin etdiyiniz s√∂zl…ôrl…ô aktivl…ô≈üdirm…ôk √º√ß√ºn istifad…ô edil…ôc…ôk.")
        base_info.setStyleSheet(f"color: {self.colors['text_secondary']}; font-style: italic; font-size: 10px;")
        base_info.setWordWrap(True)
        base_words_layout.addWidget(base_info, 3, 0, 1, 2)
        
        wake_word_layout.addWidget(base_words_frame)
        
        # X…ôb…ôrdarlƒ±q
        note_label = QLabel("Qeyd: Wake word d…ôyi≈üiklikl…ôri t…ôtbiqi yenid…ôn ba≈ülatdƒ±qdan sonra aktivl…ô≈üir.")
        note_label.setStyleSheet(f"color: {self.colors['warning']}; font-style: italic;")
        note_label.setWordWrap(True)
        wake_word_layout.addWidget(note_label)
        
        layout.addWidget(wake_word_frame)
        
        # Bo≈üluq …ôlav…ô et
        layout.addStretch()

    def create_appearance_settings(self, parent):
        layout = QVBoxLayout(parent)
        
        # G√∂r√ºn√º≈ü parametrl…ôri burada olacaq
        # ƒ∞ndi bo≈ü buraxƒ±rƒ±q
        layout.addWidget(QLabel("G√∂r√ºn√º≈ü parametrl…ôri tezlikl…ô …ôlav…ô edil…ôc…ôk..."))
        
    def create_command_settings(self, parent):
        layout = QVBoxLayout(parent)
        
        # ƒ∞stifad…ô√ßi lisenziya v…ôziyy…ôtini yoxla
        is_pro = self.Azer_AI.current_user['license_status'] == "pro"
        
        # Ba≈ülƒ±q
        title = QLabel("X√ºsusi ∆èmrl…ôr")
        title.setFont(QFont("Helvetica", 14, QFont.Weight.Bold))
        title.setStyleSheet(f"color: {self.colors['text']};")
        layout.addWidget(title)
        
        if not is_pro:
            # Free istifad…ô√ßil…ôr √º√ß√ºn Pro x√ºsusiyy…ôti mesajƒ±
            pro_message = QLabel("Bu x√ºsusiyy…ôt yalnƒ±z Pro istifad…ô√ßil…ôr…ô aiddir.")
            pro_message.setStyleSheet(f"color: {self.colors['error']}; font-size: 12pt;")
            pro_message.setAlignment(Qt.AlignmentFlag.AlignCenter)
            layout.addWidget(pro_message)
            
            # Pro versiya alma d√ºym…ôsi
            upgrade_btn = QPushButton("Pro Versiyaya Y√ºks…ôlt")
            upgrade_btn.setStyleSheet(f"""
                QPushButton {{
                    background-color: {self.colors['primary']};
                    color: white;
                    border: none;
                    border-radius: 5px;
                    padding: 10px;
                    font-size: 12pt;
                }}
                QPushButton:hover {{
                    background-color: {self.colors['secondary']};
                }}
            """)
            upgrade_btn.clicked.connect(self.show_upgrade_dialog)
            layout.addWidget(upgrade_btn)
            
            # Bo≈üluq …ôlav…ô et
            layout.addStretch()
            return
        
        # Pro istifad…ô√ßil…ôr √º√ß√ºn x√ºsusi …ômr interfeysi
        # A√ßƒ±qlama
        desc = QLabel("X√ºsusi …ômrl…ôrinizi …ôlav…ô edin, d√ºz…ônl…ôyin v…ô ya silin.")
        desc.setStyleSheet(f"color: {self.colors['text_secondary']};")
        layout.addWidget(desc)
        
        # ∆èmr siyahƒ±sƒ±
        self.command_list_frame = QScrollArea()
        self.command_list_frame.setWidgetResizable(True)
        self.command_list_frame.setStyleSheet(f"""
            QScrollArea {{
                border: 1px solid {self.colors['primary']};
                border-radius: 5px;
                background-color: {self.colors['bg_secondary']};
            }}
            
            QScrollBar:vertical {{
                border: none;
                background-color: {self.colors['bg']};
                width: 12px;
                margin: 0px;
            }}
            
            QScrollBar::handle:vertical {{
                background-color: {self.colors['primary']};
                border-radius: 6px;
                min-height: 30px;
                margin: 2px;
            }}
            
            QScrollBar::handle:vertical:hover {{
                background-color: {self.colors['secondary']};
            }}
            
            QScrollBar::add-line:vertical {{
                height: 0px;
            }}
            
            QScrollBar::sub-line:vertical {{
                height: 0px;
            }}
            
            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{
                background-color: {self.colors['bg']};
                border-radius: 6px;
            }}
        """)
        
        # ∆èmr siyahƒ±sƒ±nƒ± yarat
        self.command_list_content = QWidget()
        self.command_list_layout = QVBoxLayout(self.command_list_content)
        self.command_list_frame.setWidget(self.command_list_content)
        
        # ∆èmrl…ôri y√ºkl…ô
        self.update_command_list()
        
        # Ana t…ôtbiqd…ô …ômrl…ôri yenil…ô (m√∂vcud d…ôyi≈üiklikl…ôri y√ºkl…ôm…ôk √º√ß√ºn)
        self.Azer_AI.refresh_custom_commands()
        
        layout.addWidget(self.command_list_frame)
        
        # Yeni …ômr …ôlav…ô et d√ºym…ôsi
        add_btn = QPushButton("‚ûï Yeni ∆èmr ∆èlav…ô Et")
        add_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {self.colors['primary']};
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px;
            }}
            QPushButton:hover {{
                background-color: {self.colors['secondary']};
            }}
        """)
        add_btn.clicked.connect(lambda: self.show_command_dialog())
        layout.addWidget(add_btn)
        
    def update_command_list(self):
        """∆èmr siyahƒ±sƒ±nƒ± yenil…ô"""
        # M√∂vcud …ômrl…ôri t…ômizl…ô
        for i in reversed(range(self.command_list_layout.count())):
            widget = self.command_list_layout.itemAt(i).widget()
            if widget is not None:
                widget.deleteLater()
        
        # ∆èmrl…ôri y√ºkl…ô
        custom_commands = self.Azer_AI.load_custom_commands()
        
        if not custom_commands:
            empty_label = QLabel("H…ôl…ô x√ºsusi …ômr …ôlav…ô edilm…ôyib.")
            empty_label.setStyleSheet(f"color: {self.colors['text_secondary']};")
            empty_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            self.command_list_layout.addWidget(empty_label)
            return
        
        # H…ôr …ômr √º√ß√ºn bir frame yarat
        for command in custom_commands:
            cmd_frame = QFrame()
            cmd_frame.setStyleSheet(f"""
                QFrame {{
                    background-color: {self.colors['bg']};
                    border-radius: 5px;
                    margin: 2px;
                    padding: 5px;
                }}
            """)
            cmd_layout = QVBoxLayout(cmd_frame)
            
            # Yuxarƒ± s…ôtir - ∆èmr adƒ± v…ô n√∂v√º
            top_layout = QHBoxLayout()
            
            # ∆èmr adƒ±
            cmd_name = QLabel(command['name'])
            cmd_name.setStyleSheet(f"color: {self.colors['text']}; font-weight: bold;")
            top_layout.addWidget(cmd_name)
            
            # ∆èmr n√∂v√º
            cmd_type = QLabel(command['action'])
            cmd_type.setStyleSheet(f"color: {self.colors['text_secondary']};")
            top_layout.addWidget(cmd_type)
            
            # Bo≈üluq …ôlav…ô et
            top_layout.addStretch()
            
            # D√ºz…ônl…ô d√ºym…ôsi
            edit_btn = QPushButton("‚úèÔ∏è")
            edit_btn.setStyleSheet(f"""
                QPushButton {{
                    background-color: {self.colors['primary']};
                    color: white;
                    border: none;
                    border-radius: 5px;
                    padding: 5px;
                }}
            """)
            edit_btn.clicked.connect(lambda checked, cmd=command: self.edit_command(cmd))
            top_layout.addWidget(edit_btn)
            
            # Sil d√ºym…ôsi
            delete_btn = QPushButton("üóëÔ∏è")
            delete_btn.setStyleSheet(f"""
                QPushButton {{
                    background-color: {self.colors['error']};
                    color: white;
                    border: none;
                    border-radius: 5px;
                    padding: 5px;
                }}
            """)
            delete_btn.clicked.connect(lambda checked, cmd=command: self.delete_command(cmd))
            top_layout.addWidget(delete_btn)
            
            cmd_layout.addLayout(top_layout)
            
            # Alt s…ôtir - T…ôtikl…ôyicil…ôr
            triggers_layout = QVBoxLayout()
            triggers_layout.setSpacing(5)  # S…ôtirl…ôr arasƒ± bo≈üluq
            
            # Az…ôrbaycan dili t…ôtikl…ôyicil…ôri
            az_triggers = command['triggers'].get('az-AZ', [])
            if az_triggers:
                az_row = QHBoxLayout()
                az_row.setSpacing(5)  # Bayraq v…ô m…ôtn arasƒ± bo≈üluq
                az_icon = QLabel()
                az_icon.setPixmap(QPixmap("resim/AZ.png").scaled(30, 20, Qt.AspectRatioMode.KeepAspectRatio))
                az_row.addWidget(az_icon)
                az_label = QLabel(", ".join(az_triggers))
                az_label.setStyleSheet(f"color: {self.colors['text_secondary']};")
                az_row.addWidget(az_label)
                az_row.addStretch()  # Saƒüa doƒüru geni≈ül…ônm…ô
                triggers_layout.addLayout(az_row)
            
            # T√ºrk dili t…ôtikl…ôyicil…ôri
            tr_triggers = command['triggers'].get('tr-TR', [])
            if tr_triggers:
                tr_row = QHBoxLayout()
                tr_row.setSpacing(5)  # Bayraq v…ô m…ôtn arasƒ± bo≈üluq
                tr_icon = QLabel()
                tr_icon.setPixmap(QPixmap("resim/TR.png").scaled(30, 20, Qt.AspectRatioMode.KeepAspectRatio))
                tr_row.addWidget(tr_icon)
                tr_label = QLabel(", ".join(tr_triggers))
                tr_label.setStyleSheet(f"color: {self.colors['text_secondary']};")
                tr_row.addWidget(tr_label)
                tr_row.addStretch()  # Saƒüa doƒüru geni≈ül…ônm…ô
                triggers_layout.addLayout(tr_row)
            
            cmd_layout.addLayout(triggers_layout)
            
            self.command_list_layout.addWidget(cmd_frame)
            
            # Ayƒ±rƒ±cƒ± x…ôtt …ôlav…ô et (son …ômr deyils…ô)
            if command != custom_commands[-1]:
                divider = QFrame()
                divider.setFrameShape(QFrame.Shape.HLine)
                divider.setStyleSheet(f"""
                    QFrame {{
                        border: none;
                        background-color: {self.colors['bg_secondary']};
                        max-height: 1px;
                        margin: 5px 0px;
                    }}
                """)
                self.command_list_layout.addWidget(divider)
        
        # Bo≈üluq …ôlav…ô et
        self.command_list_layout.addStretch()
        
    def show_command_dialog(self, command=None):
        """∆èmr …ôlav…ô etm…ô/d√ºz…ônl…ôm…ô dialogunu g√∂st…ôr"""
        dialog = QDialog(self.settings_window)
        dialog.setWindowTitle("∆èmr ∆èlav…ô Et" if command is None else "∆èmri D√ºz…ônl…ô")
        dialog.setMinimumWidth(500)
        dialog.setStyleSheet(f"background-color: {self.colors['bg']};")
        
        layout = QVBoxLayout(dialog)
        
        # ∆èmr adƒ±
        name_layout = QHBoxLayout()
        name_label = QLabel("∆èmr Adƒ±:")
        name_label.setStyleSheet(f"color: {self.colors['text']};")
        name_layout.addWidget(name_label)
        
        self.cmd_name_entry = QLineEdit()
        self.cmd_name_entry.setStyleSheet(f"""
            QLineEdit {{
                background-color: {self.colors['bg_secondary']};
                color: {self.colors['text']};
                border: 1px solid {self.colors['primary']};
                border-radius: 5px;
                padding: 5px;
            }}
        """)
        if command:
            self.cmd_name_entry.setText(command['name'])
        name_layout.addWidget(self.cmd_name_entry)
        
        layout.addLayout(name_layout)
        
        # ∆èmr n√∂v√º
        action_layout = QHBoxLayout()
        action_label = QLabel("∆èmr N√∂v√º:")
        action_label.setStyleSheet(f"color: {self.colors['text']};")
        action_layout.addWidget(action_label)
        
        self.cmd_action_combo = QComboBox()
        self.cmd_action_combo.addItems([
            "Proqram A√ß", "Proqram Baƒüla", "Veb Sayt A√ß", "Skript ƒ∞≈ül…ôt", "Veb Axtarƒ±≈ü", "Klaviatura Qƒ±sayolu"
        ])
        self.cmd_action_combo.setStyleSheet(f"""
            QComboBox {{
                background-color: {self.colors['bg_secondary']};
                color: {self.colors['text']};
                border: 1px solid {self.colors['primary']};
                border-radius: 5px;
                padding: 5px;
            }}
            QComboBox::drop-down {{
                border: none;
            }}
            QComboBox QAbstractItemView {{
                background-color: {self.colors['bg']};
                color: {self.colors['text']};
                selection-background-color: {self.colors['primary']};
            }}
        """)
        if command:
            self.cmd_action_combo.setCurrentText(command['action'])
        action_layout.addWidget(self.cmd_action_combo)
        
        layout.addLayout(action_layout)
        
        # H…ôd…ôf
        target_layout = QHBoxLayout()
        self.target_label = QLabel("H…ôd…ôf:")
        self.target_label.setStyleSheet(f"color: {self.colors['text']};")
        target_layout.addWidget(self.target_label)
        
        self.cmd_target_entry = QLineEdit()
        self.cmd_target_entry.setStyleSheet(f"""
            QLineEdit {{
                background-color: {self.colors['bg_secondary']};
                color: {self.colors['text']};
                border: 1px solid {self.colors['primary']};
                border-radius: 5px;
                padding: 5px;
            }}
        """)
        if command:
            self.cmd_target_entry.setText(command['target'])
        target_layout.addWidget(self.cmd_target_entry)
        
        # Fayl se√ßm…ô d√ºym…ôsi
        self.browse_btn = QPushButton("...")
        self.browse_btn.setFixedWidth(40)
        self.browse_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {self.colors['primary']};
                color: white;
                border: none;
                border-radius: 5px;
                padding: 5px;
            }}
            QPushButton:hover {{
                background-color: {self.colors['secondary']};
            }}
        """)
        self.browse_btn.clicked.connect(self.browse_file)
        self.browse_btn.setVisible(False)  # Ba≈ülanƒüƒ±cda gizli
        target_layout.addWidget(self.browse_btn)
        
        layout.addLayout(target_layout)
        
        # Klaviatura qƒ±sayolu √º√ß√ºn k√∂m…ôk m…ôtni
        self.shortcut_help = QLabel("N√ºmun…ô: win+v, ctrl+c, alt+tab, ctrl+shift+esc")
        self.shortcut_help.setStyleSheet(f"color: {self.colors['text_secondary']}; font-size: 10px;")
        self.shortcut_help.setVisible(False)
        layout.addWidget(self.shortcut_help)
        
        # Fayl se√ßimi √º√ß√ºn k√∂m…ôk m…ôtni
        self.file_help = QLabel("Fayl yerini daxil edin v…ô ya '...' d√ºym…ôsin…ô basaraq se√ßin")
        self.file_help.setStyleSheet(f"color: {self.colors['text_secondary']}; font-size: 10px;")
        self.file_help.setVisible(False)
        layout.addWidget(self.file_help)
        
        # ∆èmr n√∂v√º d…ôyi≈üdiyind…ô h…ôd…ôf etiketini yenil…ô
        self.cmd_action_combo.currentTextChanged.connect(self.update_target_label)
        
        # T…ôtikl…ôyicil…ôr
        triggers_label = QLabel("T…ôtikl…ôyicil…ôr:")
        triggers_label.setStyleSheet(f"color: {self.colors['text']};")
        layout.addWidget(triggers_label)
        
        # Az…ôrbaycan dili t…ôtikl…ôyicil…ôri
        az_layout = QHBoxLayout()
        az_label = QLabel("Az…ôrbaycan:")
        az_label.setStyleSheet(f"color: {self.colors['text']};")
        az_layout.addWidget(az_label)
        
        self.cmd_az_triggers = QLineEdit()
        self.cmd_az_triggers.setPlaceholderText("Verg√ºll…ô ayƒ±rƒ±n")
        self.cmd_az_triggers.setStyleSheet(f"""
            QLineEdit {{
                background-color: {self.colors['bg_secondary']};
                color: {self.colors['text']};
                border: 1px solid {self.colors['primary']};
                border-radius: 5px;
                padding: 5px;
            }}
        """)
        if command and 'triggers' in command and 'az-AZ' in command['triggers']:
            self.cmd_az_triggers.setText(", ".join(command['triggers']['az-AZ']))
        az_layout.addWidget(self.cmd_az_triggers)
        
        layout.addLayout(az_layout)
        
        # T√ºrk dili t…ôtikl…ôyicil…ôri
        tr_layout = QHBoxLayout()
        tr_label = QLabel("T√ºrk dili:")
        tr_label.setStyleSheet(f"color: {self.colors['text']};")
        tr_layout.addWidget(tr_label)
        
        self.cmd_tr_triggers = QLineEdit()
        self.cmd_tr_triggers.setPlaceholderText("Verg√ºll…ô ayƒ±rƒ±n")
        self.cmd_tr_triggers.setStyleSheet(f"""
            QLineEdit {{
                background-color: {self.colors['bg_secondary']};
                color: {self.colors['text']};
                border: 1px solid {self.colors['primary']};
                border-radius: 5px;
                padding: 5px;
            }}
        """)
        if command and 'triggers' in command and 'tr-TR' in command['triggers']:
            self.cmd_tr_triggers.setText(", ".join(command['triggers']['tr-TR']))
        tr_layout.addWidget(self.cmd_tr_triggers)
        
        layout.addLayout(tr_layout)
        
        # D√ºym…ôl…ôr
        button_layout = QHBoxLayout()
        
        save_btn = QPushButton("Yadda Saxla")
        save_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {self.colors['primary']};
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px;
            }}
            QPushButton:hover {{
                background-color: {self.colors['secondary']};
            }}
        """)
        save_btn.clicked.connect(lambda: self.save_command(dialog, command))
        button_layout.addWidget(save_btn)
        
        cancel_btn = QPushButton("L…ôƒüv Et")
        cancel_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {self.colors['bg_tertiary']};
                color: {self.colors['text']};
                border: 1px solid {self.colors['border']};
                border-radius: 5px;
                padding: 10px;
            }}
            QPushButton:hover {{
                background-color: {self.colors['bg_secondary']};
                border-color: {self.colors['primary']};
            }}
        """)
        cancel_btn.clicked.connect(dialog.reject)
        button_layout.addWidget(cancel_btn)
        
        layout.addLayout(button_layout)
        
        # Ba≈ülanƒüƒ±cda h…ôd…ôf etiketini yenil…ô
        self.update_target_label(self.cmd_action_combo.currentText())
        
        dialog.exec()
    
    def update_target_label(self, action_text):
        """Se√ßil…ôn …ômr n√∂v√ºn…ô g√∂r…ô h…ôd…ôf etiketini yenil…ô"""
        if action_text == "Klaviatura Qƒ±sayolu":
            self.target_label.setText("Qƒ±sayol:")
            self.cmd_target_entry.setPlaceholderText("N√ºmun…ô: win+v, ctrl+c, alt+tab")
            self.shortcut_help.setVisible(True)
            self.file_help.setVisible(False)
            self.browse_btn.setVisible(False)
        elif action_text == "Veb Axtarƒ±≈ü":
            self.target_label.setText("URL:")
            self.cmd_target_entry.setPlaceholderText("N√ºmun…ô: https://www.google.com/search?q={}")
            self.shortcut_help.setVisible(False)
            self.file_help.setText("URL i√ßind…ôki {} i≈üar…ôti, axtarƒ±≈ü sorƒüusunun yerl…ô≈üdiril…ôc…ôyi yeri g√∂st…ôrir")
            self.file_help.setVisible(True)
            self.browse_btn.setVisible(False)
        elif action_text == "Proqram A√ß" or action_text == "Proqram Baƒüla":
            self.target_label.setText("Proqram Yolu:")
            self.cmd_target_entry.setPlaceholderText("N√ºmun…ô: C:\\Program Files\\app.exe")
            self.shortcut_help.setVisible(False)
            self.file_help.setText("Fayl yerini daxil edin v…ô ya '...' d√ºym…ôsin…ô basaraq se√ßin")
            self.file_help.setVisible(True)
            self.browse_btn.setVisible(True)
        elif action_text == "Veb Sayt A√ß":
            self.target_label.setText("URL:")
            self.cmd_target_entry.setPlaceholderText("N√ºmun…ô: https://www.example.com")
            self.shortcut_help.setVisible(False)
            self.file_help.setText("Tam URL √ºnvanƒ±nƒ± daxil edin (https:// il…ô ba≈ülamalƒ±)")
            self.file_help.setVisible(True)
            self.browse_btn.setVisible(False)
        elif action_text == "Skript ƒ∞≈ül…ôt":
            self.target_label.setText("Skript Yolu:")
            self.cmd_target_entry.setPlaceholderText("N√ºmun…ô: C:\\scripts\\myscript.py")
            self.shortcut_help.setVisible(False)
            self.file_help.setText("Fayl yerini daxil edin v…ô ya '...' d√ºym…ôsin…ô basaraq se√ßin")
            self.file_help.setVisible(True)
            self.browse_btn.setVisible(True)
        else:
            self.target_label.setText("H…ôd…ôf:")
            self.cmd_target_entry.setPlaceholderText("")
            self.shortcut_help.setVisible(False)
            self.file_help.setVisible(False)
            self.browse_btn.setVisible(False)
    
    def browse_file(self):
        """Fayl se√ßm…ô dialogunu g√∂st…ôr"""
        from PyQt6.QtWidgets import QFileDialog
        
        action = self.cmd_action_combo.currentText()
        
        if action == "Proqram A√ß" or action == "Proqram Baƒüla":
            # Proqram se√ßm…ô dialogu
            file_path, _ = QFileDialog.getOpenFileName(
                self.settings_window,
                "Proqram Se√ß",
                "",
                "T…ôtbiql…ôr (*.exe);;B√ºt√ºn Fayllar (*)"
            )
        elif action == "Skript ƒ∞≈ül…ôt":
            # Skript se√ßm…ô dialogu
            file_path, _ = QFileDialog.getOpenFileName(
                self.settings_window,
                "Skript Se√ß",
                "",
                "Python Fayllarƒ± (*.py);;B√ºt√ºn Fayllar (*)"
            )
        else:
            return
        
        if file_path:
            self.cmd_target_entry.setText(file_path)
        
    def save_command(self, dialog, old_command=None):
        """∆èmri yadda saxla"""
        name = self.cmd_name_entry.text().strip()
        action = self.cmd_action_combo.currentText()
        target = self.cmd_target_entry.text().strip()
        az_triggers = [t.strip() for t in self.cmd_az_triggers.text().split(",") if t.strip()]
        tr_triggers = [t.strip() for t in self.cmd_tr_triggers.text().split(",") if t.strip()]
        
        if not name or not target:
            QMessageBox.warning(dialog, "X…ôta", "∆èmr adƒ± v…ô h…ôd…ôf sah…ôl…ôri bo≈ü ola bilm…ôz!")
            return
        
        if not az_triggers and not tr_triggers:
            QMessageBox.warning(dialog, "X…ôta", "∆èn azƒ± bir t…ôtikl…ôyici …ôlav…ô etm…ôlisiniz!")
            return
        
        # Veb saytƒ± URL yoxlamasƒ±
        if action == "Veb Sayt A√ß" and not (target.startswith("http://") or target.startswith("https://")):
            QMessageBox.warning(dialog, "X…ôta", "Veb saytƒ± URL-si http:// v…ô ya https:// il…ô ba≈ülamalƒ±dƒ±r!")
            return
        
        # Veb axtarƒ±≈ü URL yoxlamasƒ±
        if action == "Veb Axtarƒ±≈ü":
            if "{}" not in target:
                QMessageBox.warning(dialog, "X…ôta", "Axtarƒ±≈ü URL-si i√ßind…ô {} i≈üar…ôsi olmalƒ±dƒ±r!")
                return
            if not (target.startswith("http://") or target.startswith("https://")):
                QMessageBox.warning(dialog, "X…ôta", "Axtarƒ±≈ü URL-si http:// v…ô ya https:// il…ô ba≈ülamalƒ±dƒ±r!")
                return
        
        # Yeni …ômr yarat
        new_command = {
            "name": name,
            "action": action,
            "target": target,
            "triggers": {
                "az-AZ": az_triggers,
                "tr-TR": tr_triggers
            }
        }
        
        # ∆èmrl…ôri y√ºkl…ô
        custom_commands = self.Azer_AI.load_custom_commands()
        
        # ∆èg…ôr d√ºz…ônl…ôm…ô is…ô k√∂hn…ô …ômri √ßƒ±xar
        if old_command:
            custom_commands = [cmd for cmd in custom_commands if cmd['name'] != old_command['name']]
        
        # Yeni …ômri …ôlav…ô et
        custom_commands.append(new_command)
        
        # D…ôyi≈üiklikl…ôri yadda saxla
        self.Azer_AI.save_custom_commands(custom_commands)
        
        # ∆èmr siyahƒ±sƒ±nƒ± yenil…ô
        self.update_command_list()
        
        # Ana t…ôtbiqd…ô …ômrl…ôri yenil…ô
        self.Azer_AI.refresh_custom_commands()
        
        # ∆èmr …ôlav…ô edildi mesajƒ±
        if old_command:
            QMessageBox.information(
                self.settings_window,
                "∆èmr Yenil…ôndi",
                f"{name} ∆èmri uƒüurla yenil…ôndi."
            )
        else:
            QMessageBox.information(
                self.settings_window,
                "∆èmr ∆èlav…ô Edildi",
                f"{name} ∆èmri uƒüurla …ôlav…ô edildi."
            )
        
        # Dialogu baƒüla
        dialog.accept()
        
    def edit_command(self, command):
        """∆èmri d√ºz…ônl…ô"""
        self.show_command_dialog(command)

    def delete_command(self, command):
        """∆èmri sil"""
        # T…ôsdiq p…ônc…ôr…ôsi
        result = QMessageBox.question(
            self.settings_window,
            "∆èmri Sil",
            f"'{command['name']}' …ômrini silm…ôk ist…ôdiyiniz…ô …ôminsiniz?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if result != QMessageBox.StandardButton.Yes:
            return
        
        # ∆èmri siyahƒ±dan √ßƒ±xar
        custom_commands = self.Azer_AI.load_custom_commands()
        custom_commands = [cmd for cmd in custom_commands if cmd['name'] != command['name']]
        
        # D…ôyi≈üiklikl…ôri yadda saxla
        self.Azer_AI.save_custom_commands(custom_commands)
        self.update_command_list()
        
        # Ana t…ôtbiqd…ô …ômrl…ôri yenil…ô
        self.Azer_AI.refresh_custom_commands()
        
        QMessageBox.information(
            self.settings_window,
            "∆èmr Silindi",
            f"{command['name']} ∆èmri uƒüurla silindi."
        )

    def test_voice(self):
        """S…ôs parametrl…ôrini test et"""
        # M√ºv…ôqq…ôti parametrl…ôri yarat
        temp_settings = {
            'tts_engine': 'edge' if self.tts_engine_combo.currentIndex() == 0 else 'gtts',
            'language': 'az-AZ' if self.language_combo.currentIndex() == 0 else 'tr-TR',
            'voice_gender': 'male' if self.gender_combo.currentIndex() == 0 else 'female'
        }
        
        # M√ºv…ôqq…ôti parametrl…ôrl…ô danƒ±≈ü
        current_settings = self.Azer_AI.voice_settings.copy()
        self.Azer_AI.voice_settings = temp_settings
        
        if temp_settings['language'] == 'az-AZ':
            self.Azer_AI.speak("Salam! Bu test mesajƒ±dƒ±r. S…ôs parametrl…ôri bu ≈ü…ôkild…ô olacaq.")
        else:
            self.Azer_AI.speak("Merhaba! Bu bir test mesajƒ±dƒ±r. Ses ayarlarƒ± bu ≈üekilde olacak.")
        
        # Parametrl…ôri geri y√ºkl…ô
        self.Azer_AI.voice_settings = current_settings
        
    def save_all_settings(self):
        """B√ºt√ºn parametrl…ôri yadda saxla"""
        from db_manager import db_manager
        
        # S…ôs parametrl…ôrini yarat
        voice_settings = {
            'tts_engine': 'edge' if self.tts_engine_combo.currentIndex() == 0 else 'gtts',
            'language': 'az-AZ' if self.language_combo.currentIndex() == 0 else 'tr-TR',
            'voice_gender': 'male' if self.gender_combo.currentIndex() == 0 else 'female'
        }
        
        # Wake word …ôsas d…ôy…ôrl…ôrini al (verg√ºll…ô ayrƒ±lmƒ±≈ü)
        az_words_text = self.az_base_word.text().strip() if self.az_base_word.text().strip() else "az…ôr"
        tr_words_text = self.tr_base_word.text().strip() if self.tr_base_word.text().strip() else "azer"
        
        # Veril…ônl…ôr bazasƒ±na yadda saxlamaq √º√ß√ºn verg√ºll…ô ayrƒ±lmƒ±≈ü d…ôy…ôrl…ôri istifad…ô et
        # ƒ∞stifad…ô√ßinin daxil etdiyi xam m…ôtni yadda saxlayƒ±rƒ±q, bel…ôlikl…ô bird…ôn √ßox s√∂z d…ôst…ôkl…ônir
        
        # H…ôr bir …ôsas s√∂zd…ôn variantlar yarat
        az_base_words = [word.strip() for word in az_words_text.split(',') if word.strip()]
        tr_base_words = [word.strip() for word in tr_words_text.split(',') if word.strip()]
        
        if not az_base_words:
            az_base_words = ["az…ôr"]
        if not tr_base_words:
            tr_base_words = ["azer"]
        
        # H…ôr dil √º√ß√ºn variantlarƒ± yarat
        az_variants = []
        for word in az_base_words:
            az_variants.append(word)
            az_variants.append(f"hey {word}")
            az_variants.append(f"hey {word} ai")
            az_variants.append(f"{word} ai")
        
        tr_variants = []
        for word in tr_base_words:
            tr_variants.append(word)
            tr_variants.append(f"hey {word}")
            tr_variants.append(f"hey {word} ai")
            tr_variants.append(f"{word} ai")
        
        # Wake words l√ºƒü…ôtini yarat
        wake_words = {
            'az-AZ': az_variants,
            'tr-TR': tr_variants
        }
        
        try:
            # Veril…ônl…ôr bazasƒ±na s…ôs parametrl…ôrini yadda saxla
            db_manager.update_voice_settings(
                self.Azer_AI.current_user['id'],
                voice_settings['tts_engine'],
                voice_settings['language'],
                voice_settings['voice_gender']
            )
            
            # Azer_AI-in s…ôs parametrl…ôrini yenil…ô
            self.Azer_AI.update_voice_settings(voice_settings)
            
            # ƒ∞stifad…ô√ßi wake words parametrini yenil…ô
            if 'wake_words' not in self.Azer_AI.current_user:
                self.Azer_AI.current_user['wake_words'] = {}
            
            self.Azer_AI.current_user['wake_words'] = wake_words
            
            # Veril…ônl…ôr bazasƒ±na wake word parametrl…ôrini yadda saxla
            # Burada verg√ºll…ô ayrƒ±lmƒ±≈ü xam m…ôtni yadda saxlayƒ±rƒ±q
            db_manager.update_wake_word_settings(
                self.Azer_AI.current_user['id'],
                az_words_text,
                tr_words_text
            )
            
            # Azer_AI-in wake word parametrl…ôrini yenil…ô
            self.Azer_AI.wake_word_settings = {
                'az_word': az_words_text,
                'tr_word': tr_words_text
            }
            
            # ƒ∞stifad…ô√ßi wake word settings-i yenil…ô
            if 'wake_word_settings' not in self.Azer_AI.current_user:
                self.Azer_AI.current_user['wake_word_settings'] = {}
                
            self.Azer_AI.current_user['wake_word_settings'] = {
                'az_word': az_words_text,
                'tr_word': tr_words_text
            }
            
            # Ana t…ôtbiqd…ô …ômrl…ôri yenil…ô
            self.Azer_AI.refresh_custom_commands()
            
            # Uƒüur mesajƒ±
            QMessageBox.information(
                self.settings_window,
                "Parametrl…ôr Saxlanƒ±ldƒ±",
                "B√ºt√ºn parametrl…ôr uƒüurla saxlanƒ±ldƒ±!"
            )
            
            # P…ônc…ôr…ôni baƒüla
            self.close_settings()
            
        except Exception as e:
            QMessageBox.critical(
                self.settings_window,
                "X…ôta",
                f"Parametrl…ôr saxlanƒ±lark…ôn x…ôta ba≈ü verdi: {str(e)}"
            )
        
    def close_settings(self):
        """Parametrl…ôr p…ônc…ôr…ôsini baƒüla"""
        if self.settings_window:
            self.settings_window.close()

    def show_upgrade_dialog(self):
        """Pro versiyaya y√ºks…ôltm…ô dialogunu g√∂st…ôr"""
        # Azer_AI-in subscription_manager-ƒ±nƒ± istifad…ô ed…ôr…ôk y√ºks…ôltm…ô dialogunu g√∂st…ôr
        self.Azer_AI.subscription_manager.show_upgrade_dialog()
        
    def create_plugin_settings(self, parent):
        """Plugin idar…ôetm…ôsi sekmesini yarat"""
        layout = QVBoxLayout(parent)
        
        # Ba≈ülƒ±q
        title = QLabel("Plugin ƒ∞dar…ôetm…ôsi")
        title.setFont(QFont("Helvetica", 14, QFont.Weight.Bold))
        title.setStyleSheet(f"color: {self.colors['text']};")
        layout.addWidget(title)
        
        # A√ßƒ±qlama
        desc = QLabel("Yalnƒ±z Python (.py) formatƒ±nda …ôlav…ô plugin-l…ôri y√ºkl…ôyin, idar…ô edin v…ô ya silin.")
        desc.setStyleSheet(f"color: {self.colors['text_secondary']};")
        desc.setWordWrap(True)
        layout.addWidget(desc)
        
        # D…ôst…ôkl…ôn…ôn formatlar m…ôlumatƒ±
        formats_frame = QFrame()
        formats_frame.setStyleSheet(f"""
            QFrame {{
                background-color: {self.colors['bg_secondary']};
                border-radius: 5px;
                padding: 10px;
                margin: 5px 0px;
            }}
        """)
        formats_layout = QVBoxLayout(formats_frame)
        
        formats_title = QLabel("üìã D…ôst…ôkl…ôn…ôn Plugin Formatlarƒ±:")
        formats_title.setStyleSheet(f"color: {self.colors['primary']}; font-weight: bold;")
        formats_layout.addWidget(formats_title)
        
        # Python formatƒ±
        python_format = QLabel("üêç Python (.py): Birba≈üa Python skriptl…ôri")
        python_format.setStyleSheet(f"color: {self.colors['text']};")
        formats_layout.addWidget(python_format)
        
        
        
        layout.addWidget(formats_frame)
        
        # Plugin siyahƒ±sƒ±
        self.plugin_list_frame = QScrollArea()
        self.plugin_list_frame.setWidgetResizable(True)
        self.plugin_list_frame.setStyleSheet(f"""
            QScrollArea {{
                border: 1px solid {self.colors['primary']};
                border-radius: 5px;
                background-color: {self.colors['bg_secondary']};
            }}
            
            QScrollBar:vertical {{
                border: none;
                background-color: {self.colors['bg']};
                width: 12px;
                margin: 0px;
            }}
            
            QScrollBar::handle:vertical {{
                background-color: {self.colors['primary']};
                border-radius: 6px;
                min-height: 30px;
                margin: 2px;
            }}
            
            QScrollBar::handle:vertical:hover {{
                background-color: {self.colors['secondary']};
            }}
            
            QScrollBar::add-line:vertical {{
                height: 0px;
            }}
            
            QScrollBar::sub-line:vertical {{
                height: 0px;
            }}
            
            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{
                background-color: {self.colors['bg']};
                border-radius: 6px;
            }}
        """)
        
        # Plugin siyahƒ±sƒ±nƒ± yarat
        self.plugin_list_content = QWidget()
        self.plugin_list_layout = QVBoxLayout(self.plugin_list_content)
        self.plugin_list_frame.setWidget(self.plugin_list_content)
        
        # Plugin-l…ôri y√ºkl…ô
        self.update_plugin_list()
        
        layout.addWidget(self.plugin_list_frame)
        
        # D√ºym…ôl…ôr √º√ß√ºn frame
        button_frame = QFrame()
        button_frame.setStyleSheet("background-color: transparent;")
        button_layout = QHBoxLayout(button_frame)
        
        # Plugin y√ºkl…ô d√ºym…ôsi
        install_btn = QPushButton("üì¶ Plugin Y√ºkl…ô")
        install_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {self.colors['primary']};
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px;
            }}
            QPushButton:hover {{
                background-color: {self.colors['secondary']};
            }}
        """)
        install_btn.clicked.connect(self.install_plugin)
        button_layout.addWidget(install_btn)
        

        
        # Plugin siyahƒ±sƒ±nƒ± yenil…ô d√ºym…ôsi
        refresh_btn = QPushButton("üîÑ Yenil…ô")
        refresh_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {self.colors['success']};
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px;
            }}
            QPushButton:hover {{
                background-color: {self.colors['primary']};
            }}
        """)
        refresh_btn.clicked.connect(self.update_plugin_list)
        button_layout.addWidget(refresh_btn)
        
        layout.addWidget(button_frame)
        
    def update_plugin_list(self):
        """Plugin siyahƒ±sƒ±nƒ± yenil…ô"""
        # M√∂vcud plugin-l…ôri t…ômizl…ô
        for i in reversed(range(self.plugin_list_layout.count())):
            widget = self.plugin_list_layout.itemAt(i).widget()
            if widget is not None:
                widget.deleteLater()
        
        # Plugin-l…ôri y√ºkl…ô
        plugins = self.Azer_AI.plugin_manager.get_all_plugins()
        
        if not plugins:
            empty_label = QLabel("H…ôl…ô plugin y√ºkl…ônm…ôyib.")
            empty_label.setStyleSheet(f"color: {self.colors['text_secondary']};")
            empty_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            self.plugin_list_layout.addWidget(empty_label)
            return
        
        # H…ôr plugin √º√ß√ºn bir frame yarat
        for plugin in plugins:
            plugin_frame = QFrame()
            plugin_frame.setStyleSheet(f"""
                QFrame {{
                    background-color: {self.colors['bg']};
                    border-radius: 5px;
                    margin: 2px;
                    padding: 10px;
                }}
            """)
            plugin_layout = QVBoxLayout(plugin_frame)
            
            # Yuxarƒ± s…ôtir - Plugin adƒ± v…ô lisenziya n√∂v√º
            top_layout = QHBoxLayout()
            
            # Plugin logosu
            if plugin.get('logo'):
                logo_label = QLabel()
                try:
                    # Logo yolunu yarat
                    logo_path = plugin['logo']
                    
                    # ∆èg…ôr nisbi yol is…ô, plugin qovluƒüunu …ôlav…ô et
                    if not os.path.isabs(logo_path):
                        plugin_name = plugin['name']
                        plugin_dir = os.path.join("plugins", plugin_name)
                        logo_path = os.path.join(plugin_dir, logo_path)
                    
                    # Logo faylƒ±nƒ±n m√∂vcud olub-olmadƒ±ƒüƒ±nƒ± yoxla
                    if os.path.exists(logo_path):
                        logo_pixmap = QPixmap(logo_path)
                        if not logo_pixmap.isNull():
                            logo_label.setPixmap(logo_pixmap.scaled(32, 32, Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation))
                            top_layout.addWidget(logo_label)
                        else:
                            # Logo y√ºkl…ôn…ô bilm…ôdi, standart ikon g√∂st…ôr
                            logo_label.setText("üîå")
                            logo_label.setStyleSheet(f"color: {self.colors['primary']}; font-size: 16px;")
                            top_layout.addWidget(logo_label)
                    else:
                        # Logo faylƒ± tapƒ±lmadƒ±, standart ikon g√∂st…ôr
                        logo_label.setText("üîå")
                        logo_label.setStyleSheet(f"color: {self.colors['primary']}; font-size: 16px;")
                        top_layout.addWidget(logo_label)
                except Exception as e:
                    # X…ôta halƒ±nda standart ikon g√∂st…ôr
                    logo_label.setText("üîå")
                    logo_label.setStyleSheet(f"color: {self.colors['primary']}; font-size: 16px;")
                    top_layout.addWidget(logo_label)
            else:
                # Logo yoxdursa standart ikon g√∂st…ôr
                logo_label = QLabel("üîå")
                logo_label.setStyleSheet(f"color: {self.colors['primary']}; font-size: 16px;")
                top_layout.addWidget(logo_label)
            
            # ∆èlav…ô adƒ±
            plugin_name = QLabel(plugin['name'])
            plugin_name.setStyleSheet(f"color: {self.colors['text']}; font-weight: bold;")
            top_layout.addWidget(plugin_name)
            
            # Plugin n√∂v√º
            plugin_type = "üêç PYTHON"
            
            type_label = QLabel(plugin_type)
            type_label.setStyleSheet(f"color: {self.colors['primary']}; font-weight: bold; font-size: 10px;")
            top_layout.addWidget(type_label)
            
            # Lisenziya n√∂v√º
            license_type = "PRO" if plugin['license_type'] == 'pro' else "FREE"
            license_label = QLabel(license_type)
            license_label.setStyleSheet(f"color: {self.colors['accent'] if plugin['license_type'] == 'pro' else self.colors['success']}; font-weight: bold;")
            top_layout.addWidget(license_label)
            
            # Bo≈üluq …ôlav…ô et
            top_layout.addStretch()
            
            # Sil d√ºym…ôsi
            uninstall_btn = QPushButton("üóëÔ∏è")
            uninstall_btn.setStyleSheet(f"""
                QPushButton {{
                    background-color: {self.colors['error']};
                    color: white;
                    border: none;
                    border-radius: 5px;
                    padding: 5px;
                }}
            """)
            uninstall_btn.clicked.connect(lambda checked, p=plugin: self.uninstall_plugin(p))
            top_layout.addWidget(uninstall_btn)
            
            plugin_layout.addLayout(top_layout)
            
            # Orta s…ôtir - A√ßƒ±qlama
            desc_label = QLabel(plugin['description'])
            desc_label.setStyleSheet(f"color: {self.colors['text_secondary']};")
            plugin_layout.addWidget(desc_label)
            
            # Alt s…ôtir - M…ôlumatlar
            info_layout = QHBoxLayout()
            
            # M√º…ôllif
            author_label = QLabel(f"M√º…ôllif: {plugin['author']}")
            author_label.setStyleSheet(f"color: {self.colors['text_secondary']}; font-size: 10px;")
            info_layout.addWidget(author_label)
            
            # Versiya
            version_label = QLabel(f"Versiya: {plugin['version']}")
            version_label.setStyleSheet(f"color: {self.colors['text_secondary']}; font-size: 10px;")
            info_layout.addWidget(version_label)
            
            info_layout.addStretch()
            plugin_layout.addLayout(info_layout)
            
            # T…ôtikl…ôyicil…ôr
            triggers_layout = QVBoxLayout()
            triggers_layout.setSpacing(5)
            
            # Az…ôrbaycan dili t…ôtikl…ôyicil…ôri
            az_triggers = plugin['triggers'].get('az-AZ', [])
            if az_triggers:
                az_row = QHBoxLayout()
                az_row.setSpacing(5)
                az_icon = QLabel()
                az_icon.setPixmap(QPixmap("resim/AZ.png").scaled(30, 20, Qt.AspectRatioMode.KeepAspectRatio))
                az_row.addWidget(az_icon)
                az_label = QLabel(", ".join(az_triggers))
                az_label.setStyleSheet(f"color: {self.colors['text_secondary']}; font-size: 10px;")
                az_row.addWidget(az_label)
                az_row.addStretch()
                triggers_layout.addLayout(az_row)
            
            # T√ºrk dili t…ôtikl…ôyicil…ôri
            tr_triggers = plugin['triggers'].get('tr-TR', [])
            if tr_triggers:
                tr_row = QHBoxLayout()
                tr_row.setSpacing(5)
                tr_icon = QLabel()
                tr_icon.setPixmap(QPixmap("resim/TR.png").scaled(30, 20, Qt.AspectRatioMode.KeepAspectRatio))
                tr_row.addWidget(tr_icon)
                tr_label = QLabel(", ".join(tr_triggers))
                tr_label.setStyleSheet(f"color: {self.colors['text_secondary']}; font-size: 10px;")
                tr_row.addWidget(tr_label)
                tr_row.addStretch()
                triggers_layout.addLayout(tr_row)
            
            plugin_layout.addLayout(triggers_layout)
            
            self.plugin_list_layout.addWidget(plugin_frame)
            
            # Ayƒ±rƒ±cƒ± x…ôtt …ôlav…ô et (son …ôlav…ô deyils…ô)
            if plugin != plugins[-1]:
                divider = QFrame()
                divider.setFrameShape(QFrame.Shape.HLine)
                divider.setStyleSheet(f"""
                    QFrame {{
                        border: none;
                        background-color: {self.colors['bg_secondary']};
                        max-height: 1px;
                        margin: 5px 0px;
                    }}
                """)
                self.plugin_list_layout.addWidget(divider)
        
        # Bo≈üluq …ôlav…ô et
        self.plugin_list_layout.addStretch()
        
    def install_plugin(self):
        """Plugin y√ºkl…ôm…ô dialogunu g√∂st…ôr"""
        from PyQt6.QtWidgets import QFileDialog
        
        file_path, _ = QFileDialog.getOpenFileName(
            self.settings_window,
            "Plugin Faylƒ± Se√ß",
            "",
            "Plugin Fayllarƒ± (*.zip);;B√ºt√ºn Fayllar (*)"
        )
        
        if file_path:
            try:
                # Y√ºkl…ôm…ô …ôm…ôliyyatƒ±nƒ± ba≈ülat
                success = self.Azer_AI.plugin_manager.install_plugin(file_path)
                
                if success:
                    self.update_plugin_list()
                    QMessageBox.information(
                        self.settings_window,
                        "Uƒüurlu",
                        "Plugin uƒüurla y√ºkl…ôndi!"
                    )
                else:
                    QMessageBox.warning(
                        self.settings_window,
                        "X…ôta",
                        "Plugin y√ºkl…ôn…ôrk…ôn x…ôta ba≈ü verdi!\n\nZ…ôhm…ôt olmasa plugin faylƒ±nƒ±n d√ºzg√ºn formatda olduƒüundan …ômin olun:\n‚Ä¢ manifest.json faylƒ± lazƒ±mdƒ±r\n‚Ä¢ main_file sah…ôsi d√ºzg√ºn olmalƒ±dƒ±r\n‚Ä¢ Yalnƒ±z .py fayllarƒ± d…ôst…ôkl…ônir"
                    )
            except Exception as e:
                error_message = f"Plugin y√ºkl…ôm…ô x…ôtasƒ±:\n{str(e)}"
                QMessageBox.critical(
                    self.settings_window,
                    "X…ôta",
                    error_message
                )
                
    def uninstall_plugin(self, plugin):
        """Plugin sil"""
        # T…ôsdiq p…ônc…ôr…ôsi
        result = QMessageBox.question(
            self.settings_window,
            "Plugin Sil",
            f"'{plugin['name']}' pluginini silm…ôk ist…ôdiyinizd…ôn …ômin misiniz?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if result != QMessageBox.StandardButton.Yes:
            return
        
        try:
            if self.Azer_AI.plugin_manager.uninstall_plugin(plugin['name']):
                self.update_plugin_list()
                QMessageBox.information(
                    self.settings_window,
                    "Uƒüurlu",
                    "Plugin uƒüurla silindi!"
                )
            else:
                QMessageBox.warning(
                    self.settings_window,
                    "X…ôta",
                    "Plugin silin…ôrk…ôn x…ôta ba≈ü verdi!"
                )
        except Exception as e:
            QMessageBox.critical(
                self.settings_window,
                "X…ôta",
                f"Plugin silm…ô x…ôtasƒ±: {str(e)}"
            )
    
